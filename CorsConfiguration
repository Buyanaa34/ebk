package com.golomt.gateway.GMTConfig;

import org.apache.commons.lang3.StringUtils;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.web.cors.reactive.CorsUtils;
import org.springframework.web.server.ServerWebExchange;
import org.springframework.web.server.WebFilter;
import org.springframework.web.server.WebFilterChain;
import reactor.core.publisher.Mono;

import java.util.Arrays;
import java.util.List;

/**
 * CorsConfiguration
 *
 * @author 26b712984 Munkhbayasgalan P.
 * @created 10/18/2022
 **/


@Configuration
public class CorsConfiguration {

    private static final List<String> ORIGINS = Arrays.asList("https://golomtbank.com", "https://www.golomtbank.com", "https://egolomt.mn", "https://eglmt.golomtbank.com", "https://eoffice.golomtbank.local", "https://www.youtube.com");

    private static final String ALLOWED_HEADERS = "x-requested-with, authorization, Content-Type, cache-control, expires, pragma";
    private static final String ALLOWED_METHODS = "GET, PUT, POST, DELETE, OPTIONS";
    private static final String MAX_AGE = "3600";

    @Bean
    public WebFilter corsFilter() {
        return (ServerWebExchange ctx, WebFilterChain chain) -> {
            ServerHttpRequest request = ctx.getRequest();
            if (CorsUtils.isPreFlightRequest(request)) {
                request.getHeaders();
                if (checkOrigin(request.getHeaders().getFirst(HttpHeaders.ORIGIN), ORIGINS)) {
                    ServerHttpResponse response = ctx.getResponse();
                    HttpHeaders headers = response.getHeaders();
                    headers.add("Access-Control-Allow-Origin", request.getHeaders().getFirst(HttpHeaders.ORIGIN));
                    headers.add("Access-Control-Max-Age", MAX_AGE);
                    headers.add("Access-Control-Allow-Methods", ALLOWED_METHODS);
                    headers.add("Access-Control-Allow-Headers", ALLOWED_HEADERS);

                    response.setStatusCode(HttpStatus.OK);
                    return Mono.empty();
                }
            }
            return chain.filter(ctx);
        };
    }

    private boolean checkOrigin(String header, List<String> origins) {
        if (StringUtils.isNotBlank(header) && origins != null) {
            for (String origin : origins) {
                if (header.equalsIgnoreCase(origin)) return true;
            }
        }
        return false;
    }
}
