package com.golomt.gateway.GMTUtility;

import org.bouncycastle.util.Strings;
import org.springframework.core.io.buffer.DataBuffer;
import org.springframework.core.io.buffer.DataBufferUtils;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;

import java.util.concurrent.atomic.AtomicReference;

/**
 * HttpRequestUtility
 *
 * @author 24be10264 Tilyeujan.Jkh
 **/

public class HttpRequestUtility {

    public static String getToken(ServerWebExchange exchange) {
        String authorization = exchange.getRequest().getHeaders().get("Authorization") != null
                ? exchange.getRequest().getHeaders().get("Authorization").get(0)
                : null;

        if (null != authorization && authorization.startsWith("Bearer ")) {
            return authorization.substring(7);
        }
        return null;
    }

    public static String getRequestBody(DataBuffer dataBuffer) {
        DataBufferUtils.retain(dataBuffer);
        Flux<DataBuffer> cachedFlux = Flux.defer(() -> Flux.just(dataBuffer.slice(0, dataBuffer.readableByteCount())));

        return toRaw(cachedFlux);
    }

    public static String toRaw(Flux<DataBuffer> body) {
        AtomicReference<String> rawRef = new AtomicReference<>();

        body.subscribe(buffer -> {
            byte[] bytes = new byte[buffer.readableByteCount()];
            buffer.read(bytes);
            DataBufferUtils.release(buffer);
            rawRef.set(Strings.fromUTF8ByteArray(bytes));
        });
        return rawRef.get();
    }
}
